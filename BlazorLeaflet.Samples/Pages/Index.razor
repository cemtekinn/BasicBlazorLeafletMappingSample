@page "/"
@using System.Drawing
@using BlazorLeaflet.Models

@using BlazorLeaflet.Samples.Data
@inject BlazorLeaflet.Samples.Data.ProductServices service

@inject CityService cityService
@inject IJSRuntime jsRuntime


<h1>Ürünler Listesi</h1>

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Ürün Adı</th>
                    <th>Ürün Fiyatı</th>
                    <th>Stok Adedi</th>
                    <th>Ürün Açıklaması</th>
                    <th>Enlem</th> 
                    <th>Boylam</th>
                    <th>Bayii</th>
                    <th>İşlem</th>
                </tr>
            </thead>
            <tbody>
                @if (Products.Any())
                {
                    @foreach (var product in Products)
                    {
                        <tr @onclick="(() => SetProductForUpdate(product))">
                            <td>@product.Id</td>
                            <td>@product.Name</td>
                            <td>@product.Price TL</td>
                            <td>@product.Quantity Adet</td>
                            <td>@product.Description</td>
                            <td>@product.Latitude</td>
                            <td>@product.Longitude</td>
                            <td>@product.Dealer Bayisi</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteProduct(product))">Sil</button></td>
                            
                        </tr>
                    } }
                else
                {
                    <tr><td colspan="6"><strong>Ürün mevcut değil</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    <div class="col-5 bg-light m-2 justify-content-end">
          <div class="text-center p-3 mb-3">
                 <button class="btn  btn-dark" @onclick="PanToTr">Türkiye'ye Git</button>
                <button class="btn btn-info" @onclick="UpdateMapMarker" > Bayileri Göster </button>
          </div>
          <div id="mapContainer" style="width: 300px; height: 300px;">
                 <LeafletMap Map="_map" />
          </div>
    </div>
</div>

@code
{ private Map _map;

        private Circle _circle;
        List<Product> Products = new List<Product>();




        private async Task UpdateMapMarker()
        {
            //await service.AddProductAsync(NewProduct);
            //NewProduct = new Product();
            //await RefreshProducts();
            Products = await service.GetProductAsync();
            string tooltip_;
            if (Products.Any())
            {
                foreach (var product in Products)
                {
                    var LatLng = new LatLng(float.Parse(product.Latitude.ToString()), float.Parse(product.Longitude.ToString()));

                    if (product.Name is null)
                        tooltip_ = " Bayii bulunamadı !!!!!";
                    else
                        tooltip_ = product.Name.ToString();

                    var marker = new Marker(LatLng)
                    {

                        Draggable = true,
                        Title = product.Name,        
                        Popup = new Popup { Content = string.Format(" Stok Adedi:{0},Açıklama: {1} ",product.Quantity,product.Description) },
                        Tooltip = new Tooltip { Content = tooltip_ }
                                   
                };


                _map.AddLayer(marker);


            }
        }
    }

    private async Task RefreshProducts()
    {
        Products = await service.GetProductAsync();
    }
    public Product NewProduct { get; set; } = new Product();
    private async Task AddNewProduct()
    {
        await service.AddProductAsync(NewProduct);
        NewProduct = new Product();
        await RefreshProducts();
    }

    Product UpdateProduct = new Product();
    private void SetProductForUpdate(Product product)
    {
        UpdateProduct = product;
    }

    private async Task UpdateProductData()
    {
        await service.UpdateProductAsync(UpdateProduct);
        await RefreshProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        await service.DeleteProductAsync(product);
        await RefreshProducts();
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(new Polygon
            {
                Shape = new[]
                { new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
                Fill = true,
                FillColor = Color.Blue,
                Popup = new Popup
                {
                    Content = "How are you doing,"
                }
            });

            _map.AddLayer(new Models.Rectangle
            {
                Shape = new RectangleF(10f, 0f, 5f, 1f)
            });

            _circle = new Circle
            {
                Position = new LatLng(10f, 5f),
                Radius = 10f
            };
            _map.AddLayer(_circle);
        };
    }

    private LatLng _startAt = new LatLng(47.5574007f, 16.3918687f);
    public string CityName { get; set; }


    private void FindCity()
    {
        _circle.Radius = 5000000f;
        var city = cityService.FindCity(CityName);
        if (city != null)
        {
            var marker = new Marker(city.Coordinates)
            {
                Icon = new Icon
                {
                    Url = city.CoatOfArmsImageUrl,
                    ClassName = "map-icon",
                },
                Tooltip = new Tooltip
                {
                    Content = city.Name,
                },
                Popup = new Popup
                {
                    Content = city.Description,
                }
            };

            _map.AddLayer(marker);
        }
    }

    private void ZoomMap()
    {
        _map.FitBounds(new PointF(39.925669246966415f, 32.856141356379744f), new PointF(39.925669246966415f, 32.856141356379744f), maxZoom: 5f);
    }

    private void PanToTr()
    {
        _map.PanTo(new PointF(39.925669246966415f, 32.856141356379744f), animate: true, duration: 7f);
    }
}
